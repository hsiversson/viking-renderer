#include "d3dconvert.h"

namespace vkr::Render
{
	DXGI_FORMAT D3DConvertFormat(Format format)
	{
		switch (format)
		{
		case FORMAT_RGBA32_FLOAT:
			return DXGI_FORMAT_R32G32B32A32_FLOAT;
		case FORMAT_RGBA32_UINT:
			return DXGI_FORMAT_R32G32B32A32_UINT;
		case FORMAT_RGBA32_SINT:
			return DXGI_FORMAT_R32G32B32A32_SINT;
		case FORMAT_RGBA16_FLOAT:
			return DXGI_FORMAT_R16G16B16A16_FLOAT;
		case FORMAT_RGBA16_UNORM:
			return DXGI_FORMAT_R16G16B16A16_UNORM;
		case FORMAT_RGBA16_SNORM:
			return DXGI_FORMAT_R16G16B16A16_SNORM;
		case FORMAT_RGBA16_UINT:
			return DXGI_FORMAT_R16G16B16A16_UINT;
		case FORMAT_RGBA16_SINT:
			return DXGI_FORMAT_R16G16B16A16_SINT;
		case FORMAT_RGBA8_UNORM:
			return DXGI_FORMAT_R8G8B8A8_UNORM;
		case FORMAT_RGBA8_UNORM_SRGB:
			return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
		case FORMAT_RGBA8_SNORM:
			return DXGI_FORMAT_R8G8B8A8_SNORM;
		case FORMAT_RGBA8_UINT:
			return DXGI_FORMAT_R8G8B8A8_UINT;
		case FORMAT_RGBA8_SINT:
			return DXGI_FORMAT_R8G8B8A8_SINT;
		case FORMAT_RGB32_FLOAT:
			return DXGI_FORMAT_R32G32B32_FLOAT;
		case FORMAT_RGB32_UINT:
			return DXGI_FORMAT_R32G32B32_UINT;
		case FORMAT_RGB32_SINT:
			return DXGI_FORMAT_R32G32B32_SINT;
		case FORMAT_RG32_FLOAT:
			return DXGI_FORMAT_R32G32_FLOAT;
		case FORMAT_RG32_UINT:
			return DXGI_FORMAT_R32G32_UINT;
		case FORMAT_RG32_SINT:
			return DXGI_FORMAT_R32G32_SINT;
		case FORMAT_RG16_FLOAT:
			return DXGI_FORMAT_R16G16_FLOAT;
		case FORMAT_RG16_UNORM:
			return DXGI_FORMAT_R16G16_UNORM;
		case FORMAT_RG16_SNORM:
			return DXGI_FORMAT_R16G16_SNORM;
		case FORMAT_RG16_UINT:
			return DXGI_FORMAT_R16G16_UINT;
		case FORMAT_RG16_SINT:
			return DXGI_FORMAT_R16G16_SINT;
		case FORMAT_RG8_UNORM:
			return DXGI_FORMAT_R8G8_UNORM;
		case FORMAT_RG8_SNORM:
			return DXGI_FORMAT_R8G8_SNORM;
		case FORMAT_RG8_UINT:
			return DXGI_FORMAT_R8G8_UINT;
		case FORMAT_RG8_SINT:
			return DXGI_FORMAT_R8G8_SINT;
		case FORMAT_D32_FLOAT:
			return DXGI_FORMAT_D32_FLOAT;
		case FORMAT_R32_FLOAT:
			return DXGI_FORMAT_R32_FLOAT;
		case FORMAT_R32_UINT:
			return DXGI_FORMAT_R32_UINT;
		case FORMAT_R32_SINT:
			return DXGI_FORMAT_R32_SINT;
		case FORMAT_RGB10A2_UNORM:
			return DXGI_FORMAT_R10G10B10A2_UNORM;
		case FORMAT_RGB10A2_UINT:
			return DXGI_FORMAT_R10G10B10A2_UINT;
		case FORMAT_RG11B10_FLOAT:
			return DXGI_FORMAT_R11G11B10_FLOAT;
		case FORMAT_RGB9E5_SE:
			return DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
		case FORMAT_R16_FLOAT:
			return DXGI_FORMAT_R16_FLOAT;
		case FORMAT_D16_UNORM:
			return DXGI_FORMAT_D16_UNORM;
		case FORMAT_R16_UNORM:
			return DXGI_FORMAT_R16_UNORM;
		case FORMAT_R16_SNORM:
			return DXGI_FORMAT_R16_SNORM;
		case FORMAT_R16_UINT:
			return DXGI_FORMAT_R16_UINT;
		case FORMAT_R16_SINT:
			return DXGI_FORMAT_R16_SINT;
		case FORMAT_R8_UNORM:
			return DXGI_FORMAT_R8_UNORM;
		case FORMAT_R8_SNORM:
			return DXGI_FORMAT_R8_SNORM;
		case FORMAT_R8_SINT:
			return DXGI_FORMAT_R8_SINT;
		case FORMAT_R8_UINT:
			return DXGI_FORMAT_R8_UINT;
		case FORMAT_UNKNOWN:
		default:
			return DXGI_FORMAT_UNKNOWN;
		}
	}

	Format D3DConvertFormat(DXGI_FORMAT format)
	{
		switch (format)
		{
		case DXGI_FORMAT_R32G32B32A32_FLOAT:
			return FORMAT_RGBA32_FLOAT;
		case DXGI_FORMAT_R32G32B32A32_UINT:
			return FORMAT_RGBA32_UINT;
		case DXGI_FORMAT_R32G32B32A32_SINT:
			return FORMAT_RGBA32_SINT;
		case DXGI_FORMAT_R16G16B16A16_FLOAT:
			return FORMAT_RGBA16_FLOAT;
		case DXGI_FORMAT_R16G16B16A16_UNORM:
			return FORMAT_RGBA16_UNORM;
		case DXGI_FORMAT_R16G16B16A16_SNORM:
			return FORMAT_RGBA16_SNORM;
		case DXGI_FORMAT_R16G16B16A16_UINT:
			return FORMAT_RGBA16_UINT;
		case DXGI_FORMAT_R16G16B16A16_SINT:
			return FORMAT_RGBA16_SINT;
		case DXGI_FORMAT_R8G8B8A8_UNORM:
			return FORMAT_RGBA8_UNORM;
		case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
			return FORMAT_RGBA8_UNORM_SRGB;
		case DXGI_FORMAT_R8G8B8A8_SNORM:
			return FORMAT_RGBA8_SNORM;
		case DXGI_FORMAT_R8G8B8A8_UINT:
			return FORMAT_RGBA8_UINT;
		case DXGI_FORMAT_R8G8B8A8_SINT:
			return FORMAT_RGBA8_SINT;
		case DXGI_FORMAT_R32G32B32_FLOAT:
			return FORMAT_RGB32_FLOAT;
		case DXGI_FORMAT_R32G32B32_UINT:
			return FORMAT_RGB32_UINT;
		case DXGI_FORMAT_R32G32B32_SINT:
			return FORMAT_RGB32_SINT;
		case DXGI_FORMAT_R32G32_FLOAT:
			return FORMAT_RG32_FLOAT;
		case DXGI_FORMAT_R32G32_UINT:
			return FORMAT_RG32_UINT;
		case DXGI_FORMAT_R32G32_SINT:
			return FORMAT_RG32_SINT;
		case DXGI_FORMAT_R16G16_FLOAT:
			return FORMAT_RG16_FLOAT;
		case DXGI_FORMAT_R16G16_UNORM:
			return FORMAT_RG16_UNORM;
		case DXGI_FORMAT_R16G16_SNORM:
			return FORMAT_RG16_SNORM;
		case DXGI_FORMAT_R16G16_UINT:
			return FORMAT_RG16_UINT;
		case DXGI_FORMAT_R16G16_SINT:
			return FORMAT_RG16_SINT;
		case DXGI_FORMAT_R8G8_UNORM:
			return FORMAT_RG8_UNORM;
		case DXGI_FORMAT_R8G8_SNORM:
			return FORMAT_RG8_SNORM;
		case DXGI_FORMAT_R8G8_UINT:
			return FORMAT_RG8_UINT;
		case DXGI_FORMAT_R8G8_SINT:
			return FORMAT_RG8_SINT;
		case DXGI_FORMAT_D32_FLOAT:
			return FORMAT_D32_FLOAT;
		case DXGI_FORMAT_R32_FLOAT:
			return FORMAT_R32_FLOAT;
		case DXGI_FORMAT_R32_UINT:
			return FORMAT_R32_UINT;
		case DXGI_FORMAT_R32_SINT:
			return FORMAT_R32_SINT;
		case DXGI_FORMAT_R10G10B10A2_UNORM:
			return FORMAT_RGB10A2_UNORM;
		case DXGI_FORMAT_R10G10B10A2_UINT:
			return FORMAT_RGB10A2_UINT;
		case DXGI_FORMAT_R11G11B10_FLOAT:
			return FORMAT_RG11B10_FLOAT;
		case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
			return FORMAT_RGB9E5_SE;
		case DXGI_FORMAT_R16_FLOAT:
			return FORMAT_R16_FLOAT;
		case DXGI_FORMAT_D16_UNORM:
			return FORMAT_D16_UNORM;
		case DXGI_FORMAT_R16_UNORM:
			return FORMAT_R16_UNORM;
		case DXGI_FORMAT_R16_SNORM:
			return FORMAT_R16_SNORM;
		case DXGI_FORMAT_R16_UINT:
			return FORMAT_R16_UINT;
		case DXGI_FORMAT_R16_SINT:
			return FORMAT_R16_SINT;
		case DXGI_FORMAT_R8_UNORM:
			return FORMAT_R8_UNORM;
		case DXGI_FORMAT_R8_SNORM:
			return FORMAT_R8_SNORM;
		case DXGI_FORMAT_R8_SINT:
			return FORMAT_R8_SINT;
		case DXGI_FORMAT_R8_UINT:
			return FORMAT_R8_UINT;
		case DXGI_FORMAT_UNKNOWN:
		default:
			return FORMAT_UNKNOWN;
		}
	}

	D3D12_COMPARISON_FUNC D3DConvertComparisonFunc(ComparisonFunc comparisonFunc)
	{
		switch (comparisonFunc)
		{
		case COMPARISON_FUNC_NONE:
			return D3D12_COMPARISON_FUNC_NONE;
		case COMPARISON_FUNC_NEVER:
			return D3D12_COMPARISON_FUNC_NEVER;
		case COMPARISON_FUNC_LESS:
			return D3D12_COMPARISON_FUNC_LESS;
		case COMPARISON_FUNC_EQUAL:
			return D3D12_COMPARISON_FUNC_EQUAL;
		case COMPARISON_FUNC_LESS_EQUAL:
			return D3D12_COMPARISON_FUNC_LESS_EQUAL;
		case COMPARISON_FUNC_GREATER:
			return D3D12_COMPARISON_FUNC_GREATER;
		case COMPARISON_FUNC_NOT_EQUAL:
			return D3D12_COMPARISON_FUNC_EQUAL;
		case COMPARISON_FUNC_GREATER_EQUAL:
			return D3D12_COMPARISON_FUNC_GREATER_EQUAL;
		case COMPARISON_FUNC_ALWAYS:
			return D3D12_COMPARISON_FUNC_ALWAYS;
		default:
			assert(false);
			return D3D12_COMPARISON_FUNC_NONE;
		}
	}

	ComparisonFunc D3DConvertComparisonFunc(D3D12_COMPARISON_FUNC comparisonFunc)
	{
		switch (comparisonFunc)
		{
		case D3D12_COMPARISON_FUNC_NONE:
			return COMPARISON_FUNC_NONE;
		case D3D12_COMPARISON_FUNC_NEVER:
			return COMPARISON_FUNC_NEVER;
		case D3D12_COMPARISON_FUNC_LESS:
			return COMPARISON_FUNC_LESS;
		case D3D12_COMPARISON_FUNC_EQUAL:
			return COMPARISON_FUNC_EQUAL;
		case D3D12_COMPARISON_FUNC_LESS_EQUAL:
			return COMPARISON_FUNC_LESS_EQUAL;
		case D3D12_COMPARISON_FUNC_GREATER:
			return COMPARISON_FUNC_GREATER;
		case D3D12_COMPARISON_FUNC_NOT_EQUAL:
			return COMPARISON_FUNC_EQUAL;
		case D3D12_COMPARISON_FUNC_GREATER_EQUAL:
			return COMPARISON_FUNC_GREATER_EQUAL;
		case D3D12_COMPARISON_FUNC_ALWAYS:
			return COMPARISON_FUNC_ALWAYS;
		default:
			assert(false);
			return COMPARISON_FUNC_NONE;
		}
	}

	D3D12_PRIMITIVE_TOPOLOGY_TYPE D3DConvertPrimitiveType(PrimitiveType primitiveType)
	{
		switch (primitiveType)
		{
		case PRIMITIVE_TYPE_TRIANGLE:
			return D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
		case PRIMITIVE_TYPE_POINT:
			return D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT;
		case PRIMITIVE_TYPE_LINE:
			return D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE;
		default:
			assert(false);
			return D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED;
		}
	}

	PrimitiveType D3DConvertPrimitiveType(D3D12_PRIMITIVE_TOPOLOGY_TYPE primitiveType)
	{
		switch (primitiveType)
		{
		case D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT:
			return PRIMITIVE_TYPE_POINT;
		case D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE:
			return PRIMITIVE_TYPE_LINE;
		case D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE:
			return PRIMITIVE_TYPE_TRIANGLE;
		default:
			assert(false);
			return PRIMITIVE_TYPE_TRIANGLE;
		}
	}

	D3D12_BARRIER_ACCESS D3DConvertResourceStateAccess(ResourceStateAccess access)
	{
		switch (access)
		{
		case RESOURCE_STATE_ACCESS_COMMON:
			return D3D12_BARRIER_ACCESS_COMMON;
		case RESOURCE_STATE_ACCESS_VERTEX_BUFFER:
			return D3D12_BARRIER_ACCESS_VERTEX_BUFFER;
		case RESOURCE_STATE_ACCESS_INDEX_BUFFER:
			return D3D12_BARRIER_ACCESS_INDEX_BUFFER;
		case RESOURCE_STATE_ACCESS_CONSTANT_BUFFER:
			return D3D12_BARRIER_ACCESS_CONSTANT_BUFFER;
		case RESOURCE_STATE_ACCESS_RENDER_TARGET:
			return D3D12_BARRIER_ACCESS_RENDER_TARGET;
		case RESOURCE_STATE_ACCESS_DEPTH_STENCIL:
			return D3D12_BARRIER_ACCESS_DEPTH_STENCIL_WRITE;
		case RESOURCE_STATE_ACCESS_READ_RESOURCE:
			return D3D12_BARRIER_ACCESS_SHADER_RESOURCE;
		case RESOURCE_STATE_ACCESS_READ_WRITE_RESOURCE:
			return D3D12_BARRIER_ACCESS_UNORDERED_ACCESS;
		case RESOURCE_STATE_ACCESS_COPY_TARGET:
			return D3D12_BARRIER_ACCESS_COPY_DEST;
		case RESOURCE_STATE_ACCESS_COPY_SOURCE:
			return D3D12_BARRIER_ACCESS_COPY_SOURCE;
		case RESOURCE_STATE_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ:
			return D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ;
		case RESOURCE_STATE_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE:
			return D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE;
		default:
			assert(false);
			return D3D12_BARRIER_ACCESS_COMMON;
		}
	}

	ResourceStateAccess D3DConvertResourceStateAccess(D3D12_BARRIER_ACCESS access)
	{
		switch (access)
		{
		case D3D12_BARRIER_ACCESS_COMMON:
			return RESOURCE_STATE_ACCESS_COMMON;
		case D3D12_BARRIER_ACCESS_VERTEX_BUFFER:
			return RESOURCE_STATE_ACCESS_VERTEX_BUFFER;
		case D3D12_BARRIER_ACCESS_INDEX_BUFFER:
			return RESOURCE_STATE_ACCESS_INDEX_BUFFER;
		case D3D12_BARRIER_ACCESS_CONSTANT_BUFFER:
			return RESOURCE_STATE_ACCESS_CONSTANT_BUFFER;
		case D3D12_BARRIER_ACCESS_RENDER_TARGET:
			return RESOURCE_STATE_ACCESS_RENDER_TARGET;
		case D3D12_BARRIER_ACCESS_DEPTH_STENCIL_WRITE:
			return RESOURCE_STATE_ACCESS_DEPTH_STENCIL;
		case D3D12_BARRIER_ACCESS_SHADER_RESOURCE:
			return RESOURCE_STATE_ACCESS_READ_RESOURCE;
		case D3D12_BARRIER_ACCESS_UNORDERED_ACCESS:
			return RESOURCE_STATE_ACCESS_READ_WRITE_RESOURCE;
		case D3D12_BARRIER_ACCESS_COPY_DEST:
			return RESOURCE_STATE_ACCESS_COPY_TARGET;
		case D3D12_BARRIER_ACCESS_COPY_SOURCE:
			return RESOURCE_STATE_ACCESS_COPY_SOURCE;
		case D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ:
			return RESOURCE_STATE_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ;
		case D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE:
			return RESOURCE_STATE_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE;
		default:
			assert(false);
			return RESOURCE_STATE_ACCESS_COMMON;
		}
	}

	D3D12_BARRIER_SYNC D3DConvertResourceStateSync(ResourceStateSync sync)
	{
		switch (sync)
		{
		case RESOURCE_STATE_SYNC_NONE:
			return D3D12_BARRIER_SYNC_NONE;
		case RESOURCE_STATE_SYNC_ALL:
			return D3D12_BARRIER_SYNC_ALL;
		case RESOURCE_STATE_SYNC_DRAW:
			return D3D12_BARRIER_SYNC_DRAW;
		case RESOURCE_STATE_SYNC_GEOMETRY_STAGE:
			return D3D12_BARRIER_SYNC_VERTEX_SHADING;
		case RESOURCE_STATE_SYNC_PIXEL_STAGE:
			return D3D12_BARRIER_SYNC_PIXEL_SHADING;
		case RESOURCE_STATE_SYNC_COMPUTE:
			return D3D12_BARRIER_SYNC_COMPUTE_SHADING;
		case RESOURCE_STATE_SYNC_RAYTRACING:
			return D3D12_BARRIER_SYNC_RAYTRACING;
		case RESOURCE_STATE_SYNC_RENDER_TARGET:
			return D3D12_BARRIER_SYNC_RENDER_TARGET;
		case RESOURCE_STATE_SYNC_DEPTH_STECIL:
			return D3D12_BARRIER_SYNC_DEPTH_STENCIL;
		case RESOURCE_STATE_SYNC_COPY:
			return D3D12_BARRIER_SYNC_COPY;
		default:
			assert(false);
			return D3D12_BARRIER_SYNC_NONE;
		}
	}

	ResourceStateSync D3DConvertResourceStateSync(D3D12_BARRIER_SYNC sync)
	{
		switch (sync)
		{
		case D3D12_BARRIER_SYNC_NONE:
			return RESOURCE_STATE_SYNC_NONE;
		case D3D12_BARRIER_SYNC_ALL:
			return RESOURCE_STATE_SYNC_ALL;
		case D3D12_BARRIER_SYNC_DRAW:
			return RESOURCE_STATE_SYNC_DRAW;
		case D3D12_BARRIER_SYNC_VERTEX_SHADING:
			return RESOURCE_STATE_SYNC_GEOMETRY_STAGE;
		case D3D12_BARRIER_SYNC_PIXEL_SHADING:
			return RESOURCE_STATE_SYNC_PIXEL_STAGE;
		case D3D12_BARRIER_SYNC_COMPUTE_SHADING:
			return RESOURCE_STATE_SYNC_COMPUTE;
		case D3D12_BARRIER_SYNC_RAYTRACING:
			return RESOURCE_STATE_SYNC_RAYTRACING;
		case D3D12_BARRIER_SYNC_RENDER_TARGET:
			return RESOURCE_STATE_SYNC_RENDER_TARGET;
		case D3D12_BARRIER_SYNC_DEPTH_STENCIL:
			return RESOURCE_STATE_SYNC_DEPTH_STECIL;
		case D3D12_BARRIER_SYNC_COPY:
			return RESOURCE_STATE_SYNC_COPY;
		default:
			assert(false);
			return RESOURCE_STATE_SYNC_NONE;
		}
	}

	D3D12_BARRIER_LAYOUT D3DConvertResourceStateLayout(ResourceStateLayout layout)
	{
		switch (layout)
		{
		case RESOURCE_STATE_LAYOUT_UNDEFINED:
			return D3D12_BARRIER_LAYOUT_UNDEFINED;
		case RESOURCE_STATE_LAYOUT_COMMON:
			return D3D12_BARRIER_LAYOUT_COMMON;
		case RESOURCE_STATE_LAYOUT_PRESENT:
			return D3D12_BARRIER_LAYOUT_PRESENT;
		case RESOURCE_STATE_LAYOUT_READ:
			return D3D12_BARRIER_LAYOUT_GENERIC_READ;
		case RESOURCE_STATE_LAYOUT_WRITE:
			return D3D12_BARRIER_LAYOUT_UNORDERED_ACCESS;
		case RESOURCE_STATE_LAYOUT_RENDER_TARGET:
			return D3D12_BARRIER_LAYOUT_RENDER_TARGET;
		case RESOURCE_STATE_LAYOUT_COPY_SOURCE:
			return D3D12_BARRIER_LAYOUT_COPY_SOURCE;
		case RESOURCE_STATE_LAYOUT_COPY_TARGET:
			return D3D12_BARRIER_LAYOUT_COPY_DEST;
		default:
			assert(false);
			return D3D12_BARRIER_LAYOUT_UNDEFINED;
		}
	}

	ResourceStateLayout D3DConvertResourceStateLayout(D3D12_BARRIER_LAYOUT layout)
	{
		switch (layout)
		{
		case D3D12_BARRIER_LAYOUT_UNDEFINED:
			return RESOURCE_STATE_LAYOUT_UNDEFINED;
		case D3D12_BARRIER_LAYOUT_COMMON:
			return RESOURCE_STATE_LAYOUT_COMMON;
		case D3D12_BARRIER_LAYOUT_GENERIC_READ:
			return RESOURCE_STATE_LAYOUT_READ;
		case D3D12_BARRIER_LAYOUT_UNORDERED_ACCESS:
			return RESOURCE_STATE_LAYOUT_WRITE;
		case D3D12_BARRIER_LAYOUT_RENDER_TARGET:
			return RESOURCE_STATE_LAYOUT_RENDER_TARGET;
		case D3D12_BARRIER_LAYOUT_COPY_SOURCE:
			return RESOURCE_STATE_LAYOUT_COPY_SOURCE;
		case D3D12_BARRIER_LAYOUT_COPY_DEST:
			return RESOURCE_STATE_LAYOUT_COPY_TARGET;
		default:
			assert(false);
			return RESOURCE_STATE_LAYOUT_UNDEFINED;
		}
	}

	D3D12_PRIMITIVE_TOPOLOGY D3DConvertPrimitiveTopology(PrimitiveTopology topologyType)
	{
		switch (topologyType)
		{
		case PRIMITIVE_TOPOLOGY_LINELIST:
			return D3D_PRIMITIVE_TOPOLOGY_LINELIST;
		case PRIMITIVE_TOPOLOGY_UNDEFINED:
			return D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
		case PRIMITIVE_TOPOLOGY_POINTLIST:
			return D3D_PRIMITIVE_TOPOLOGY_POINTLIST;
		case PRIMITIVE_TOPOLOGY_LINESTRIP:
			return D3D_PRIMITIVE_TOPOLOGY_LINESTRIP;
		case PRIMITIVE_TOPOLOGY_TRIANGLELIST:
			return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
		case PRIMITIVE_TOPOLOGY_TRIANGLESTRIP:
			return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;
		case PRIMITIVE_TOPOLOGY_TRIANGLEFAN:
			return D3D_PRIMITIVE_TOPOLOGY_TRIANGLEFAN;
		case PRIMITIVE_TOPOLOGY_LINELIST_ADJ:
			return D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ;
		case PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ:
			return D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ;
		case PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ:
			return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ;
		case PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ:
			return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ;
		default:
			assert(false);
			return D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
		}
	}

	vkr::Render::PrimitiveTopology D3DConvertPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY topologyType)
	{
		switch (topologyType)
		{
		case D3D_PRIMITIVE_TOPOLOGY_UNDEFINED:
			return PRIMITIVE_TOPOLOGY_UNDEFINED;
		case D3D_PRIMITIVE_TOPOLOGY_LINELIST:
			return PRIMITIVE_TOPOLOGY_LINELIST;
		case D3D_PRIMITIVE_TOPOLOGY_POINTLIST:
			return PRIMITIVE_TOPOLOGY_POINTLIST;
		case D3D_PRIMITIVE_TOPOLOGY_LINESTRIP:
			return PRIMITIVE_TOPOLOGY_LINESTRIP;
		case D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST:
			return PRIMITIVE_TOPOLOGY_TRIANGLELIST;
		case D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP:
			return PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;
		case D3D_PRIMITIVE_TOPOLOGY_TRIANGLEFAN:
			return PRIMITIVE_TOPOLOGY_TRIANGLEFAN;
		case D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ:
			return PRIMITIVE_TOPOLOGY_LINELIST_ADJ;
		case D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ:
			return PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ;
		case D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ:
			return PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ;
		case D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ:
			return PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ;
		default:
			assert(false);
			return PRIMITIVE_TOPOLOGY_UNDEFINED;
		}
	}

}