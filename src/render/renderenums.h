#pragma once
#include "core/types.h"

namespace vkr::Render
{
	static constexpr uint32_t MAX_NUM_RENDER_TARGETS = 8;

	enum Format : uint8_t
	{
		FORMAT_UNKNOWN,

		FORMAT_RGBA32_FLOAT,
		FORMAT_RGBA32_UINT,
		FORMAT_RGBA32_SINT,

		FORMAT_RGBA16_FLOAT,
		FORMAT_RGBA16_UNORM,
		FORMAT_RGBA16_SNORM,
		FORMAT_RGBA16_UINT,
		FORMAT_RGBA16_SINT,

		FORMAT_RGBA8_UNORM,
		FORMAT_RGBA8_UNORM_SRGB,
		FORMAT_RGBA8_SNORM,
		FORMAT_RGBA8_UINT,
		FORMAT_RGBA8_SINT,

		FORMAT_RGB32_FLOAT,
		FORMAT_RGB32_UINT,
		FORMAT_RGB32_SINT,

		FORMAT_RG32_FLOAT,
		FORMAT_RG32_UINT,
		FORMAT_RG32_SINT,

		FORMAT_RG16_FLOAT,
		FORMAT_RG16_UNORM,
		FORMAT_RG16_SNORM,
		FORMAT_RG16_UINT,
		FORMAT_RG16_SINT,

		FORMAT_RG8_UNORM,
		FORMAT_RG8_SNORM,
		FORMAT_RG8_UINT,
		FORMAT_RG8_SINT,

		FORMAT_D32_FLOAT,
		FORMAT_R32_FLOAT,
		FORMAT_R32_UINT,
		FORMAT_R32_SINT,

		FORMAT_RGB10A2_UNORM,
		FORMAT_RGB10A2_UINT,

		FORMAT_RG11B10_FLOAT,

		FORMAT_RGB9E5_SE,

		FORMAT_R16_FLOAT,
		FORMAT_D16_UNORM,
		FORMAT_R16_UNORM,
		FORMAT_R16_SNORM,
		FORMAT_R16_UINT,
		FORMAT_R16_SINT,

		FORMAT_R8_UNORM,
		FORMAT_R8_SNORM,
		FORMAT_R8_SINT,
		FORMAT_R8_UINT,
	};

	uint32_t GetFormatNumBits(Format format);
	uint32_t GetFormatByteSize(Format format);

	enum FaceCullMode : uint8_t
	{
		FACE_CULL_MODE_NONE,
		FACE_CULL_MODE_BACK,
		FACE_CULL_MODE_FRONT,
	};

	enum ComparisonFunc : uint8_t
	{
		COMPARISON_FUNC_NONE,
		COMPARISON_FUNC_NEVER,
		COMPARISON_FUNC_LESS,
		COMPARISON_FUNC_EQUAL,
		COMPARISON_FUNC_LESS_EQUAL,
		COMPARISON_FUNC_GREATER,
		COMPARISON_FUNC_NOT_EQUAL,
		COMPARISON_FUNC_GREATER_EQUAL,
		COMPARISON_FUNC_ALWAYS,
	};

	enum PrimitiveType : uint8_t
	{
		PRIMITIVE_TYPE_TRIANGLE,
		PRIMITIVE_TYPE_POINT,
		PRIMITIVE_TYPE_LINE,
	};

	enum PrimitiveTopology : uint16_t
	{
		PRIMITIVE_TOPOLOGY_UNDEFINED,
		PRIMITIVE_TOPOLOGY_POINTLIST,
		PRIMITIVE_TOPOLOGY_LINELIST,
		PRIMITIVE_TOPOLOGY_LINESTRIP,
		PRIMITIVE_TOPOLOGY_TRIANGLELIST,
		PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
		PRIMITIVE_TOPOLOGY_TRIANGLEFAN,
		PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
		PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
		PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
		PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	};

	enum ResourceStateAccess : uint32_t
	{
		RESOURCE_STATE_ACCESS_COMMON,
		RESOURCE_STATE_ACCESS_VERTEX_BUFFER,
		RESOURCE_STATE_ACCESS_INDEX_BUFFER,
		RESOURCE_STATE_ACCESS_CONSTANT_BUFFER,
		RESOURCE_STATE_ACCESS_RENDER_TARGET,
		RESOURCE_STATE_ACCESS_DEPTH_STENCIL,
		RESOURCE_STATE_ACCESS_READ_RESOURCE,
		RESOURCE_STATE_ACCESS_READ_WRITE_RESOURCE,
		RESOURCE_STATE_ACCESS_COPY_TARGET,
		RESOURCE_STATE_ACCESS_COPY_SOURCE,
		RESOURCE_STATE_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ,
		RESOURCE_STATE_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE,

		RESOURCE_STATE_ACCESS_COUNT
	};

	enum ResourceStateSync : uint32_t
	{
		RESOURCE_STATE_SYNC_NONE,
		RESOURCE_STATE_SYNC_ALL,
		RESOURCE_STATE_SYNC_DRAW,
		RESOURCE_STATE_SYNC_GEOMETRY_STAGE,
		RESOURCE_STATE_SYNC_PIXEL_STAGE,
		RESOURCE_STATE_SYNC_COMPUTE,
		RESOURCE_STATE_SYNC_RAYTRACING,
		RESOURCE_STATE_SYNC_RENDER_TARGET,
		RESOURCE_STATE_SYNC_DEPTH_STECIL,
		RESOURCE_STATE_SYNC_COPY,

		RESOURCE_STATE_SYNC_COUNT
	};

	enum ResourceStateLayout : uint32_t
	{
		RESOURCE_STATE_LAYOUT_UNDEFINED,
		RESOURCE_STATE_LAYOUT_COMMON,
		RESOURCE_STATE_LAYOUT_PRESENT,
		RESOURCE_STATE_LAYOUT_READ,
		RESOURCE_STATE_LAYOUT_WRITE,
		RESOURCE_STATE_LAYOUT_RENDER_TARGET,
		RESOURCE_STATE_LAYOUT_COPY_SOURCE,
		RESOURCE_STATE_LAYOUT_COPY_TARGET,
		RESOURCE_STATE_LAYOUT_DEPTH_READ,
		RESOURCE_STATE_LAYOUT_DEPTH_WRITE,

		RESOURCE_STATE_LAYOUT_COUNT
	};
}